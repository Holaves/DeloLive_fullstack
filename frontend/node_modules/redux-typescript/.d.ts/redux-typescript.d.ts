// Generated by typings
// Source: lib/createStore.d.ts
declare module '~redux-typescript/lib/createStore' {
export interface Action {
    type: string;
}
export const ActionTypes: {
    INIT: string;
};
export type Reducer<T> = (state: T, action: Action) => T;
export type Listener = () => void;
export interface Observer<T> {
    next(T: any): any;
}
export type Dispatch<T extends Action> = (action: T) => T;
export type StoreConstructor<T> = (reducer: Reducer<T>, state?: T) => Store<T>;
export type Enhancer<T> = (createStore: CreateStore<T>) => StoreConstructor<T>;
export type CreateStore<T> = (reducer: Reducer<T>, state?: T, enhancer?: Enhancer<T>) => Store<T>;
export class Store<T> {
    private isDispatching;
    private reducer;
    private state;
    private currListeners;
    private nextListeners;
    constructor(reducer: Reducer<T>, preloadedState?: T);
    dispatch<T extends Action>(action: T): T;
    private ensureCanMutateNextListeners();
    getState(): T;
    unsubscribe(listener: Listener): void;
    subscribe(listener: Listener): () => void;
    replaceReducer(nextReducer: Reducer<T>): void;
    observable(): {
        subscribe: (observer: Observer<T>) => {
            unsubscribe: () => void;
        };
    };
}
export default function createStore<T>(reducer: Reducer<T>, stateOrEnhancer?: T | Enhancer<T>, enhancer?: Enhancer<T>): Store<T>;
}
declare module 'redux-typescript/lib/createStore' {
export * from '~redux-typescript/lib/createStore';
export { default } from '~redux-typescript/lib/createStore';
}

// Generated by typings
// Source: lib/applyMiddleware.d.ts
declare module '~redux-typescript/lib/applyMiddleware' {
import { CreateStore, Store, Action, Dispatch, Enhancer } from '~redux-typescript/lib/createStore';
export interface MiddlewareApi<T> {
    getState: () => T;
    dispatch: Dispatch<any>;
}
export type MiddlewareFn<T extends Action> = (next: Dispatch<T>) => Dispatch<T>;
export type Middleware<T extends Action> = (api: MiddlewareApi<T>) => MiddlewareFn<T>;
export default function applyMiddleware<T extends Action>(...middlewares: Middleware<T>[]): (createStore: (reducer: (state: T, action: Action) => T, state?: T, enhancer?: (createStore: CreateStore) => (reducer: (state: T, action: Action) => T, state?: T) => Store<T>) => Store<T>) => (reducer: (state: T, action: Action) => T, preloadedState: T, enhancer: (createStore: (reducer: (state: T, action: Action) => T, state?: T, enhancer?: Enhancer) => Store<T>) => (reducer: (state: T, action: Action) => T, state?: T) => Store<T>) => Store<T>;
}
declare module 'redux-typescript/lib/applyMiddleware' {
export * from '~redux-typescript/lib/applyMiddleware';
export { default } from '~redux-typescript/lib/applyMiddleware';
}

// Generated by typings
// Source: lib/bindActionCreators.d.ts
declare module '~redux-typescript/lib/bindActionCreators' {
import { Dispatch, Action } from '~redux-typescript/lib/createStore';
export type ActionCreator<T extends Action> = (...args) => T;
export type ActionCreatorsMapObject = {
    [key: string]: ActionCreator<any>;
};
export function bindActionCreator<T extends Action>(actionCreator: ActionCreator<T>, dispatch: Dispatch<T>): ActionCreator<T>;
var _default: (actionCreators: {
    [key: string]: (...args: any[]) => any;
}, dispatch: (action: any) => any) => {
    [key: string]: (...args: any[]) => any;
};
export default _default;
}
declare module 'redux-typescript/lib/bindActionCreators' {
export * from '~redux-typescript/lib/bindActionCreators';
export { default } from '~redux-typescript/lib/bindActionCreators';
}

// Generated by typings
// Source: lib/combineReducers.d.ts
declare module '~redux-typescript/lib/combineReducers' {
import { Reducer } from '~redux-typescript/lib/createStore';
export default function combineReducers<T>(reducers: {
    [key: string]: Reducer<any>;
}): Reducer<T>;
}
declare module 'redux-typescript/lib/combineReducers' {
export * from '~redux-typescript/lib/combineReducers';
export { default } from '~redux-typescript/lib/combineReducers';
}

// Generated by typings
// Source: lib/index.d.ts
declare module '~redux-typescript/lib/index' {
export { default as createStore } from '~redux-typescript/lib/createStore';
export * from '~redux-typescript/lib/createStore';
export { default as applyMiddleware } from '~redux-typescript/lib/applyMiddleware';
export { default as bindActionCreators } from '~redux-typescript/lib/bindActionCreators';
export * from '~redux-typescript/lib/bindActionCreators';
export { default as combineReducers } from '~redux-typescript/lib/combineReducers';
}
declare module 'redux-typescript/lib/index' {
export * from '~redux-typescript/lib/index';
}
declare module 'redux-typescript' {
export * from '~redux-typescript/lib/index';
}

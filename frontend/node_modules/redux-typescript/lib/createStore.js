/**
 * @description
 * @author yangjunbao
 * @since 2016-07-14 20:21:58
 * @version 1.0.0.0
 * @file src/createStore.ts
 * @desc src/createStore.ts
 */
'use strict';
var symbol_observable_1 = require('symbol-observable');
exports.ActionTypes = { INIT: '@@redux/INIT' };
var Store = (function () {
    function Store(reducer, preloadedState) {
        this.isDispatching = false;
        this.currListeners = [];
        this.nextListeners = this.currListeners;
        this.reducer = reducer;
        this.state = preloadedState;
        this.dispatch = this.dispatch.bind(this);
        this.getState = this.getState.bind(this);
        this.unsubscribe = this.unsubscribe.bind(this);
        this.subscribe = this.subscribe.bind(this);
        this.replaceReducer = this.replaceReducer.bind(this);
        this.observable = this.observable.bind(this);
        this.dispatch({ type: exports.ActionTypes.INIT });
        this[symbol_observable_1.default] = this.observable;
    }
    Store.prototype.dispatch = function (action) {
        if (this.isDispatching) {
            throw new Error('Reducers may not dispatch actions.');
        }
        try {
            this.isDispatching = true;
            this.state = this.reducer(this.state, action);
        }
        finally {
            this.isDispatching = false;
        }
        this.currListeners = this.nextListeners;
        this.currListeners.forEach(function (listener) { return listener(); });
        return action;
    };
    Store.prototype.ensureCanMutateNextListeners = function () {
        this.nextListeners === this.currListeners && (this.nextListeners = this.currListeners.slice());
    };
    Store.prototype.getState = function () {
        return this.state;
    };
    Store.prototype.unsubscribe = function (listener) {
        this.ensureCanMutateNextListeners();
        var index = this.nextListeners.indexOf(listener);
        ~index && this.nextListeners.splice(index, 1);
    };
    Store.prototype.subscribe = function (listener) {
        var _this = this;
        this.ensureCanMutateNextListeners();
        this.nextListeners.push(listener);
        var removed = false;
        return function () { return removed = removed ? removed : !_this.unsubscribe(listener); };
    };
    Store.prototype.replaceReducer = function (nextReducer) {
        this.reducer = nextReducer;
        this.dispatch({ type: exports.ActionTypes.INIT });
    };
    Store.prototype.observable = function () {
        var _this = this;
        return {
            subscribe: function (observer) {
                var observeState = function () {
                    observer.next && observer.next(_this.getState());
                };
                observeState();
                var unsubscribe = _this.subscribe(observeState);
                return { unsubscribe: unsubscribe };
            }
        };
    };
    return Store;
}());
exports.Store = Store;
function createStore(reducer, stateOrEnhancer, enhancer) {
    var state;
    if (typeof stateOrEnhancer === 'function') {
        enhancer = stateOrEnhancer;
    }
    else {
        state = stateOrEnhancer;
    }
    if (enhancer) {
        return enhancer(createStore)(reducer, state);
    }
    return new Store(reducer, state);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = createStore;

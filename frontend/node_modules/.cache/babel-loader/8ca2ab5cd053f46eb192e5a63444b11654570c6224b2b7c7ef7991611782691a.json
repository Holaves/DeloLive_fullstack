{"ast":null,"code":"var _jsxFileName = \"/home/user/MyLinuxProjects/dl-comp/src/components/Trigger.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './styles/Trigger.css';\nimport Button, { ButtonBorderVariant, ButtonTextVariant } from './UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Trigger = _ref => {\n  _s();\n  let {\n    imgPath,\n    title,\n    buttonText,\n    buttonTextTwo\n  } = _ref;\n  const [isHover, setIsHover] = useState(false);\n  const mouseOverHandler = e => {\n    setIsHover(true);\n  };\n  const mouseOutHandler = e => {\n    setIsHover(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isHover ? 'TriggerDirty' : 'Trigger',\n    onMouseOver: mouseOverHandler,\n    onMouseOut: mouseOutHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Trigger__title\",\n      style: {\n        marginTop: title.trim().split(/\\s+/).length >= 2 ? '50px' : '74px'\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Trigger__image-cont\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgPath,\n        alt: \"f\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        marginTop: buttonTextTwo ? '63px' : '96px'\n      },\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: buttonText,\n          height: 50,\n          width: 255,\n          variantBorder: isHover ? ButtonBorderVariant.dirty : ButtonBorderVariant.black,\n          variantText: isHover ? ButtonTextVariant.dirty : ButtonTextVariant.black\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), buttonTextTwo ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '31px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: buttonTextTwo,\n            height: 50,\n            width: 255,\n            variantBorder: isHover ? ButtonBorderVariant.dirty : ButtonBorderVariant.black,\n            variantText: isHover ? ButtonTextVariant.dirty : ButtonTextVariant.black\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this) : () => {}]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(Trigger, \"FTC8EpIspi2qaDtU9gFRhqZT02A=\");\n_c = Trigger;\nexport default Trigger;\nvar _c;\n$RefreshReg$(_c, \"Trigger\");","map":{"version":3,"names":["React","useState","Button","ButtonBorderVariant","ButtonTextVariant","Trigger","imgPath","title","buttonText","buttonTextTwo","isHover","setIsHover","mouseOverHandler","e","mouseOutHandler","marginTop","trim","split","length","dirty","black"],"sources":["/home/user/MyLinuxProjects/dl-comp/src/components/Trigger.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport './styles/Trigger.css'\nimport Button, { ButtonBorderVariant, ButtonTextVariant } from './UI/Button/Button';\n\ninterface TriggerProps{\n    imgPath: string;\n    title: string;\n    buttonText: string;\n    buttonTextTwo?: string;\n}\n\nconst Trigger: FC<TriggerProps> = ({imgPath, title, buttonText, buttonTextTwo}) => {\n    const [isHover, setIsHover] = useState(false)\n    \n    const mouseOverHandler = (e: React.MouseEvent<HTMLDivElement>) => {\n        setIsHover(true)\n    }\n    const mouseOutHandler = (e: React.MouseEvent<HTMLDivElement>) => {\n        setIsHover(false)\n    }\n\n    return (\n        <div\n            className={isHover ? 'TriggerDirty' : 'Trigger'}\n            onMouseOver={mouseOverHandler}\n            onMouseOut={mouseOutHandler}\n        >\n            <h1 className=\"Trigger__title\"\n            style={{marginTop: title.trim().split(/\\s+/).length >= 2 ? '50px' : '74px'}}\n            >{title}</h1>\n            <div className=\"Trigger__image-cont\">\n                <img src={imgPath} alt=\"f\" />   \n            </div>\n            <div className=\"buttons\" style={{marginTop: buttonTextTwo ? '63px' : '96px'}}>\n                <>\n                    <Button\n                        text={buttonText}\n                        height={50}\n                        width={255}\n                        variantBorder={isHover ? ButtonBorderVariant.dirty : ButtonBorderVariant.black}\n                        variantText={isHover ? ButtonTextVariant.dirty : ButtonTextVariant.black}\n                    />\n                    {\n                    buttonTextTwo ?\n                    <div style={{marginTop: '31px'}}>\n                        <Button\n                        text={buttonTextTwo}\n                        height={50}\n                        width={255}\n                        variantBorder={isHover ? ButtonBorderVariant.dirty : ButtonBorderVariant.black}\n                        variantText={isHover ? ButtonTextVariant.dirty : ButtonTextVariant.black}\n                        />\n                    </div>\n                    : () => {}\n                    }\n                </>\n            </div>\n        </div>\n    );\n};\n\nexport default Trigger;"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,sBAAsB;AAC7B,OAAOC,MAAM,IAAIC,mBAAmB,EAAEC,iBAAiB,QAAQ,oBAAoB;AAAC;AAAA;AASpF,MAAMC,OAAyB,GAAG,QAAiD;EAAA;EAAA,IAAhD;IAACC,OAAO;IAAEC,KAAK;IAAEC,UAAU;IAAEC;EAAa,CAAC;EAC1E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMW,gBAAgB,GAAIC,CAAmC,IAAK;IAC9DF,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC;EACD,MAAMG,eAAe,GAAID,CAAmC,IAAK;IAC7DF,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACI;IACI,SAAS,EAAED,OAAO,GAAG,cAAc,GAAG,SAAU;IAChD,WAAW,EAAEE,gBAAiB;IAC9B,UAAU,EAAEE,eAAgB;IAAA,wBAE5B;MAAI,SAAS,EAAC,gBAAgB;MAC9B,KAAK,EAAE;QAACC,SAAS,EAAER,KAAK,CAACS,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,IAAI,CAAC,GAAG,MAAM,GAAG;MAAM,CAAE;MAAA,UAC1EX;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eACb;MAAK,SAAS,EAAC,qBAAqB;MAAA,uBAChC;QAAK,GAAG,EAAED,OAAQ;QAAC,GAAG,EAAC;MAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAC3B,eACN;MAAK,SAAS,EAAC,SAAS;MAAC,KAAK,EAAE;QAACS,SAAS,EAAEN,aAAa,GAAG,MAAM,GAAG;MAAM,CAAE;MAAA,uBACzE;QAAA,wBACI,QAAC,MAAM;UACH,IAAI,EAAED,UAAW;UACjB,MAAM,EAAE,EAAG;UACX,KAAK,EAAE,GAAI;UACX,aAAa,EAAEE,OAAO,GAAGP,mBAAmB,CAACgB,KAAK,GAAGhB,mBAAmB,CAACiB,KAAM;UAC/E,WAAW,EAAEV,OAAO,GAAGN,iBAAiB,CAACe,KAAK,GAAGf,iBAAiB,CAACgB;QAAM;UAAA;UAAA;UAAA;QAAA,QAC3E,EAEFX,aAAa,gBACb;UAAK,KAAK,EAAE;YAACM,SAAS,EAAE;UAAM,CAAE;UAAA,uBAC5B,QAAC,MAAM;YACP,IAAI,EAAEN,aAAc;YACpB,MAAM,EAAE,EAAG;YACX,KAAK,EAAE,GAAI;YACX,aAAa,EAAEC,OAAO,GAAGP,mBAAmB,CAACgB,KAAK,GAAGhB,mBAAmB,CAACiB,KAAM;YAC/E,WAAW,EAAEV,OAAO,GAAGN,iBAAiB,CAACe,KAAK,GAAGf,iBAAiB,CAACgB;UAAM;YAAA;YAAA;YAAA;UAAA;QACvE;UAAA;UAAA;UAAA;QAAA,QACA,GACJ,MAAM,CAAC,CAAC;MAAA;IAEX;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;AAAC,GAhDIf,OAAyB;AAAA,KAAzBA,OAAyB;AAkD/B,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
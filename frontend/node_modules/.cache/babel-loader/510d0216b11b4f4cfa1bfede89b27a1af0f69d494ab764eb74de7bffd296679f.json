{"ast":null,"code":"var _jsxFileName = \"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './FormInput.css';\nimport { useDate } from '../../../hooks/useDate';\nimport { selectValid, selectUserData, setIsSetPassword, setPassword, setPasswordUpdate, setUserData } from '../../globalSlices/registrationSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormInput = _ref => {\n  _s();\n  let {\n    field,\n    placeholder,\n    isTel = false,\n    title,\n    checkPassword = false,\n    errorMessage,\n    validation = {\n      minLength: 1,\n      maxLength: 100\n    },\n    isPassword = false,\n    isInfo = false,\n    width = 'normal',\n    indexOne = false,\n    date = false,\n    inputType = \"text\"\n  } = _ref;\n  const dispatch = useDispatch();\n  const selectedReg = useSelector(selectValid);\n  const userDateRedux = useSelector(selectUserData);\n  const checkPasswordDate = useSelector(setPassword);\n  const [passwordShow, setPasswordShow] = useState(true);\n  const [counterSend, setCounterSend] = useState(0);\n  const [isError, setIsError] = useState(false);\n  const [ErrorMsg, setErrorMsg] = useState('');\n  const [inputWidth, setInputWidth] = useState(0);\n  const [marginTop, setMarginTop] = useState(0);\n  const [telNum, setTelNum] = useState('+7 (___) ___-__-_');\n  const [inputText, setInputText] = useState('');\n  const [inputDate, setInputDate] = useState(useDate());\n  const [sendTime, setSendTime] = useState(1);\n  const [intervalId, setIntervalId] = useState(null);\n  const passwordShowHandler = () => {\n    if (passwordShow) {\n      setPasswordShow(false);\n      return;\n    }\n    setPasswordShow(true);\n  };\n  const createErrorMsg = msg => {\n    setIsError(true);\n    setErrorMsg(msg);\n  };\n  const checkValid = () => {\n    let valid = false;\n    let currentText;\n    if (date) currentText = inputDate;else if (isTel) currentText = telNum;else currentText = inputText;\n    if (field === 'none') return false;\n    if (validation.minLength <= currentText.length || isTel) {\n      if (validation.maxLength >= currentText.length || isTel) {\n        if (field !== 'birthdate' && field !== 'card' && field !== 'telephone' && field !== 'password' && field !== 'check') {\n          currentText = currentText.trim();\n          if (!/\\s/g.test(currentText)) {\n            setIsError(false);\n            return true;\n          } else {\n            createErrorMsg('Это поле не должно содержать знак пробела');\n          }\n        } else {\n          if (isTel) {\n            if (currentText[0] === '+') {\n              let newCT = currentText.substring(1);\n              let newNewCT = newCT.replace('7', '8');\n              currentText = newNewCT;\n            }\n            currentText = currentText.replaceAll(' ', '');\n            currentText = currentText.replaceAll('-', '');\n            currentText = currentText.replace('(', '');\n            currentText = currentText.replace(')', '');\n            if (validation.minLength < currentText.length) {\n              if (validation.maxLength >= currentText.length) {\n                setIsError(false);\n                return true;\n              } else {\n                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength));\n              }\n            } else {\n              createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength));\n            }\n          } else if (isPassword) {\n            if (!/\\s/g.test(currentText) && !/-/g.test(currentText) && !/\\//g.test(currentText)) {\n              setIsError(false);\n              return true;\n            } else {\n              createErrorMsg('Пароль не должен содержать символов: \"пробел\" , \"/\" , \"/\"');\n            }\n          } else if (checkPassword) {\n            if (checkPasswordDate === inputText) {\n              setIsError(false);\n              dispatch(setIsSetPassword(true));\n              return true;\n            } else {\n              createErrorMsg('Пароли не совпадают');\n            }\n          } else if (field === 'birthdate') {\n            setIsError(false);\n            return true;\n          } else if (field === 'card') {\n            setIsError(false);\n            return true;\n          }\n        }\n      } else {\n        createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength));\n      }\n    } else {\n      createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength));\n    }\n    return valid;\n  };\n  const sendData = () => {\n    let dataValue;\n    if (date) dataValue = inputDate;else if (isTel) dataValue = telNum;else dataValue = inputText;\n    const valid = checkValid();\n    if (isTel) {\n      if (dataValue[0] === '+') {\n        let newCT = dataValue.substring(1);\n        let newNewCT = newCT.replace('7', '8');\n        dataValue = newNewCT;\n      }\n      dataValue = dataValue.replaceAll(' ', '');\n      dataValue = dataValue.replaceAll('-', '');\n      dataValue = dataValue.replace('(', '');\n      dataValue = dataValue.replace(')', '');\n    }\n    if (!valid) {\n      if (isTel) setTelNum('+7 (___) ___-__-_');else setInputText('');\n    }\n    if (field !== 'none' && valid) {\n      dispatch(setUserData({\n        [field]: dataValue\n      }));\n    }\n  };\n  let counter = 0;\n  const inputHandler = e => {\n    let inputValue = e.target.value;\n    setInputText(inputValue);\n  };\n  const passwordHandler = e => {\n    let inputValue = e.target.value;\n    counter = 0;\n    clearInterval(intervalId);\n    setIntervalId(setInterval(() => {\n      counter = counter + 0.5;\n      if (counter === sendTime) {\n        dispatch(setPasswordUpdate(inputValue));\n        clearInterval(intervalId);\n        return;\n      }\n    }, 500));\n    setInputText(inputValue);\n  };\n  const dateHandler = e => {\n    let inputValue = e.target.value;\n    setInputDate(inputValue);\n  };\n  const telNumHandler = e => {\n    let inputValue = e.target.value;\n    if (inputValue.length - 1 < 18 && Number(inputValue[inputValue.length - 1]) >= 0) {\n      let copyInputValue = inputValue.split('');\n      copyInputValue.every((cv, i, arr) => {\n        if (cv === '_') {\n          arr[i] = inputValue[inputValue.length - 1];\n          arr[inputValue.length - 1] = '';\n          return false;\n        } else return true;\n      });\n      let newVal = copyInputValue.join('');\n      setTelNum(newVal);\n    } else {\n      setTelNum(inputValue);\n    }\n  };\n  const getMarginTop = () => {\n    if (!indexOne) {\n      if (isError) {\n        setMarginTop(29);\n      } else {\n        setMarginTop(53);\n      }\n    }\n  };\n  const getInputType = () => {\n    if (isPassword) {\n      if (passwordShow) return 'password';else return inputType;\n    } else if (date) return 'date';else return inputType;\n  };\n  const getInputValue = () => {\n    if (isTel) return telNum;else if (date) return inputDate;else return inputText;\n  };\n  const getWidth = () => {\n    if (inputWidth === 0) {\n      let decrementWidth = 0;\n      if (isPassword) {\n        decrementWidth = 20;\n      }\n      switch (width) {\n        case 'normal':\n          setInputWidth(265 - decrementWidth);\n          break;\n        case 'small':\n          setInputWidth(165 - decrementWidth);\n          break;\n        case 'large':\n          setInputWidth(365 - decrementWidth);\n          break;\n      }\n    }\n  };\n  useEffect(() => {\n    getWidth();\n    getMarginTop();\n  }, []);\n  useEffect(() => {\n    if (counterSend !== 0) {\n      sendData();\n    }\n    setCounterSend(1);\n  }, [selectedReg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FormInput\",\n    style: {\n      marginTop: marginTop\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: isPassword ? 'flex' : 'block',\n        alignItems: 'center',\n        maxWidth: inputWidth + 30\n      },\n      className: isError ? 'FormInput__bar_error' : 'FormInput__bar',\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: inputWidth\n        },\n        type: getInputType(),\n        onChange: isTel ? telNumHandler : date ? dateHandler : isPassword ? passwordHandler : inputHandler,\n        value: getInputValue(),\n        autoComplete: \"new-password\",\n        className: \"FormInput_input\",\n        placeholder: isTel ? '+7(___)__-__-__' : placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), isPassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: passwordShow ? 'password_show' : 'password_hide',\n        onClick: passwordShowHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this), isInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), isError ? errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__errorMessage\",\n      style: {\n        maxWidth: inputWidth\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__errorMessage\",\n      style: {\n        maxWidth: inputWidth\n      },\n      children: ErrorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 9\n  }, this);\n};\n_s(FormInput, \"7N2ZrIW+CJKgVUBJImNIL+9HV20=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useDate];\n});\n_c = FormInput;\nexport default FormInput;\nvar _c;\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"names":["React","useEffect","useState","useDate","selectValid","selectUserData","setIsSetPassword","setPassword","setPasswordUpdate","setUserData","useDispatch","useSelector","FormInput","field","placeholder","isTel","title","checkPassword","errorMessage","validation","minLength","maxLength","isPassword","isInfo","width","indexOne","date","inputType","dispatch","selectedReg","userDateRedux","checkPasswordDate","passwordShow","setPasswordShow","counterSend","setCounterSend","isError","setIsError","ErrorMsg","setErrorMsg","inputWidth","setInputWidth","marginTop","setMarginTop","telNum","setTelNum","inputText","setInputText","inputDate","setInputDate","sendTime","setSendTime","intervalId","setIntervalId","passwordShowHandler","createErrorMsg","msg","checkValid","valid","currentText","length","trim","test","newCT","substring","newNewCT","replace","replaceAll","String","sendData","dataValue","counter","inputHandler","e","inputValue","target","value","passwordHandler","clearInterval","setInterval","dateHandler","telNumHandler","Number","copyInputValue","split","every","cv","i","arr","newVal","join","getMarginTop","getInputType","getInputValue","getWidth","decrementWidth","display","alignItems","maxWidth"],"sources":["/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport ValidationType from '../../../types/Validation';\nimport './FormInput.css'\nimport { useDate } from '../../../hooks/useDate'\nimport { selectValid, selectUserData, setIsSetPassword, setPassword, setPasswordUpdate, setUserData } from '../../globalSlices/registrationSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport userModel, { varUserModel } from '../../../types/UserModel';\ninterface FormInputProps{\n    field: userModel;\n    placeholder: string;\n    title: string;\n    errorMessage?: string;\n    isPassword?: boolean;\n    isInfo?: boolean;\n    isTel?: boolean;\n    checkPassword?: boolean;\n    validation?: ValidationType;\n    date?: boolean;\n    width?: 'normal' | 'small' | 'large';\n    indexOne?: true;\n    inputType?: string;\n}\n\nconst FormInput: FC<FormInputProps> = ({\n    field,\n    placeholder,\n    isTel = false,\n    title,\n    checkPassword = false,\n    errorMessage,\n    validation = {\n        minLength: 1,\n        maxLength: 100,\n\n    },\n    isPassword = false,\n    isInfo = false,\n    width = 'normal',\n    indexOne = false,\n    date = false,\n    inputType = \"text\"\n}) => {\n    const dispatch = useDispatch()\n    const selectedReg = useSelector(selectValid)\n    const userDateRedux = useSelector(selectUserData)\n    const checkPasswordDate = useSelector(setPassword)\n\n    const [passwordShow, setPasswordShow] = useState <boolean>(true)\n    const [counterSend, setCounterSend] = useState <number>(0)\n    const [isError, setIsError] = useState <boolean>(false)\n    const [ErrorMsg, setErrorMsg] = useState <string>('')\n    const [inputWidth, setInputWidth] = useState <number>(0)\n    const [marginTop, setMarginTop] = useState <number>(0)\n    const [telNum, setTelNum] = useState <string>('+7 (___) ___-__-_')\n    const [inputText, setInputText] = useState <string>('')\n    const [inputDate, setInputDate] = useState <string>(useDate())\n\n    const [sendTime, setSendTime] = useState <number>(1);\n    const [intervalId, setIntervalId] = useState <any>(null);\n\n    const passwordShowHandler = () => {\n        if(passwordShow){\n            setPasswordShow(false)\n            return\n        }\n        setPasswordShow(true)\n    }\n\n    const createErrorMsg = (msg: string) => {\n        setIsError(true)\n        setErrorMsg(msg)\n    }\n\n    const checkValid = (): boolean => {\n        let valid: boolean = false\n        let currentText;\n\n        if(date) currentText = inputDate\n        else if(isTel) currentText = telNum\n        else currentText = inputText\n\n        if(field === 'none') return false\n        if(validation.minLength <= currentText.length || isTel){\n            if(validation.maxLength >= currentText.length || isTel){\n                if(field !== 'birthdate' && field !== 'card' && field !== 'telephone' && field !== 'password' && field !== 'check'){\n                    currentText = currentText.trim()\n                    if (!/\\s/g.test(currentText)){\n                        setIsError(false)\n                        return true\n                    }\n                    else{\n                        createErrorMsg('Это поле не должно содержать знак пробела')\n                    }\n                }\n                else{\n                    if(isTel){\n                        if(currentText[0] === '+'){\n                            let newCT = currentText.substring(1)\n                            let newNewCT = newCT.replace('7','8');\n                            currentText = newNewCT\n                        }\n                        currentText = currentText.replaceAll(' ', '')\n                        currentText = currentText.replaceAll('-', '')\n                        currentText = currentText.replace('(', '')\n                        currentText = currentText.replace(')', '')\n                        \n                        if(validation.minLength < currentText.length){\n                            if(validation.maxLength >= currentText.length){\n                                setIsError(false)\n                                return true\n                            }\n                            else{\n                                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n                            }\n                        }\n                        else{\n                            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n                        }\n                    }\n                    else if(isPassword){\n                        if(!/\\s/g.test(currentText) && !/-/g.test(currentText) && !/\\//g.test(currentText)){\n                            setIsError(false)\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароль не должен содержать символов: \"пробел\" , \"/\" , \"/\"')\n                        }\n                    }\n                    else if(checkPassword){\n                        if(checkPasswordDate === inputText){\n                            setIsError(false)\n                            dispatch(setIsSetPassword(true))\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароли не совпадают')\n                        }\n                    }\n                    else if(field === 'birthdate'){\n                        setIsError(false)\n                        return true\n                    }\n\n                    else if(field === 'card'){\n                        setIsError(false)\n                        return true\n                    }\n                    \n                }\n            }\n            else{\n                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n            }\n        }\n        else{\n            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n        }\n        return valid\n    }\n    const sendData = () => {\n        let dataValue;\n\n        if(date) dataValue = inputDate\n        else if(isTel) dataValue = telNum\n        else dataValue = inputText\n        const valid: boolean = checkValid()\n\n        if(isTel){\n            if(dataValue[0] === '+'){\n                let newCT = dataValue.substring(1)\n                let newNewCT = newCT.replace('7','8');\n                dataValue = newNewCT\n            }\n            dataValue = dataValue.replaceAll(' ', '')\n            dataValue = dataValue.replaceAll('-', '')\n            dataValue = dataValue.replace('(', '')\n            dataValue = dataValue.replace(')', '')\n        }\n        if(!valid){\n            if(isTel) setTelNum('+7 (___) ___-__-_')\n            else setInputText('')\n        }\n\n        if(field !== 'none' && valid){\n            dispatch(setUserData({[field]: dataValue}))\n        }\n    }\n    let counter = 0\n    const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        setInputText(inputValue)\n    }\n    const passwordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        counter = 0\n        clearInterval(intervalId);\n\n        setIntervalId(setInterval(() => {\n            counter = counter + 0.5\n            if (coun
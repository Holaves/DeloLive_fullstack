{"ast":null,"code":"var _jsxFileName = \"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './FormInput.css';\nimport { useDate } from '../../../hooks/useDate';\nimport { selectValid, selectUserData, setIsSetPassword, setPassword, setPasswordUpdate, setUserData } from '../../globalSlices/registrationSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormInput = _ref => {\n  _s();\n  let {\n    field,\n    placeholder,\n    isTel = false,\n    title,\n    checkPassword = false,\n    errorMessage,\n    validation = {\n      minLength: 1,\n      maxLength: 100\n    },\n    isPassword = false,\n    isInfo = false,\n    isCard = false,\n    width = 'normal',\n    indexOne = false,\n    date = false,\n    inputType = \"text\"\n  } = _ref;\n  const dispatch = useDispatch();\n  const selectedReg = useSelector(selectValid);\n  const userDateRedux = useSelector(selectUserData);\n  const checkPasswordDate = useSelector(setPassword);\n  const [passwordShow, setPasswordShow] = useState(true);\n  const [counterSend, setCounterSend] = useState(0);\n  const [isError, setIsError] = useState(false);\n  const [ErrorMsg, setErrorMsg] = useState('');\n  const [inputWidth, setInputWidth] = useState(0);\n  const [marginTop, setMarginTop] = useState(0);\n  const [telNum, setTelNum] = useState('+7 (___) ___-__-_');\n  const [inputText, setInputText] = useState('');\n  const [inputDate, setInputDate] = useState(useDate());\n  const [sendTime, setSendTime] = useState(1);\n  const [intervalId, setIntervalId] = useState(null);\n  const passwordShowHandler = () => {\n    if (passwordShow) {\n      setPasswordShow(false);\n      return;\n    }\n    setPasswordShow(true);\n  };\n  const createErrorMsg = msg => {\n    setIsError(true);\n    setErrorMsg(msg);\n  };\n  const checkValid = () => {\n    let valid = false;\n    let currentText;\n    if (date) currentText = inputDate;else if (isTel) currentText = telNum;else currentText = inputText;\n    if (field === 'none') return false;\n    if (validation.minLength <= currentText.length || isTel) {\n      if (validation.maxLength >= currentText.length || isTel) {\n        if (field !== 'birthdate' && field !== 'card' && field !== 'telephone' && field !== 'password' && field !== 'check') {\n          currentText = currentText.trim();\n          if (!/\\s/g.test(currentText)) {\n            setIsError(false);\n            return true;\n          } else {\n            createErrorMsg('Это поле не должно содержать знак пробела');\n          }\n        } else {\n          if (isTel) {\n            if (currentText[0] === '+') {\n              let newCT = currentText.substring(1);\n              let newNewCT = newCT.replace('7', '8');\n              currentText = newNewCT;\n            }\n            currentText = currentText.replaceAll(' ', '');\n            currentText = currentText.replaceAll('-', '');\n            currentText = currentText.replace('(', '');\n            currentText = currentText.replace(')', '');\n            if (validation.minLength < currentText.length) {\n              if (validation.maxLength >= currentText.length) {\n                setIsError(false);\n                return true;\n              } else {\n                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength));\n              }\n            } else {\n              createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength));\n            }\n          } else if (isPassword) {\n            if (!/\\s/g.test(currentText) && !/-/g.test(currentText) && !/\\//g.test(currentText)) {\n              setIsError(false);\n              return true;\n            } else {\n              createErrorMsg('Пароль не должен содержать символов: \"пробел\" , \"/\" , \"/\"');\n            }\n          } else if (checkPassword) {\n            if (checkPasswordDate === inputText) {\n              setIsError(false);\n              dispatch(setIsSetPassword(true));\n              return true;\n            } else {\n              createErrorMsg('Пароли не совпадают');\n            }\n          } else if (field === 'birthdate') {\n            setIsError(false);\n            return true;\n          } else if (field === 'card') {\n            setIsError(false);\n            return true;\n          }\n        }\n      } else {\n        createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength));\n      }\n    } else {\n      createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength));\n    }\n    return valid;\n  };\n  const sendData = () => {\n    let dataValue;\n    if (date) dataValue = inputDate;else if (isTel) dataValue = telNum;else dataValue = inputText;\n    const valid = checkValid();\n    if (isTel) {\n      if (dataValue[0] === '+') {\n        let newCT = dataValue.substring(1);\n        let newNewCT = newCT.replace('7', '8');\n        dataValue = newNewCT;\n      }\n      dataValue = dataValue.replaceAll(' ', '');\n      dataValue = dataValue.replaceAll('-', '');\n      dataValue = dataValue.replace('(', '');\n      dataValue = dataValue.replace(')', '');\n    }\n    if (!valid) {\n      if (isTel) setTelNum('+7 (___) ___-__-_');else setInputText('');\n    }\n    if (field !== 'none' && valid) {\n      dispatch(setUserData({\n        [field]: dataValue\n      }));\n    }\n  };\n  let counter = 0;\n  const inputHandler = e => {\n    let inputValue = e.target.value;\n    setInputText(inputValue);\n  };\n  const passwordHandler = e => {\n    let inputValue = e.target.value;\n    counter = 0;\n    clearInterval(intervalId);\n    setIntervalId(setInterval(() => {\n      counter = counter + 0.5;\n      if (counter === sendTime) {\n        dispatch(setPasswordUpdate(inputValue));\n        clearInterval(intervalId);\n        return;\n      }\n    }, 500));\n    setInputText(inputValue);\n  };\n  const dateHandler = e => {\n    let inputValue = e.target.value;\n    setInputDate(inputValue);\n  };\n  const cardHandler = e => {\n    let inputValue = e.target.value;\n    let beforeValue = '';\n    let counter = 0;\n    inputValue.split('').forEach(cv => {\n      if (counter === 4) {\n        beforeValue = beforeValue + ' ' + cv;\n      } else {\n        beforeValue = beforeValue + cv;\n      }\n      counter++;\n    });\n    beforeValue = beforeValue.trim();\n    setInputDate(beforeValue);\n  };\n  const telNumHandler = e => {\n    let inputValue = e.target.value;\n    if (inputValue.length - 1 < 18 && Number(inputValue[inputValue.length - 1]) >= 0) {\n      let copyInputValue = inputValue.split('');\n      copyInputValue.every((cv, i, arr) => {\n        if (cv === '_') {\n          arr[i] = inputValue[inputValue.length - 1];\n          arr[inputValue.length - 1] = '';\n          return false;\n        } else return true;\n      });\n      let newVal = copyInputValue.join('');\n      setTelNum(newVal);\n    } else {\n      setTelNum(inputValue);\n    }\n  };\n  const getMarginTop = () => {\n    if (!indexOne) {\n      if (isError) {\n        setMarginTop(29);\n      } else {\n        setMarginTop(53);\n      }\n    }\n  };\n  const getInputType = () => {\n    if (isPassword) {\n      if (passwordShow) return 'password';else return inputType;\n    } else if (date) return 'date';else return inputType;\n  };\n  const getInputValue = () => {\n    if (isTel) return telNum;else if (date) return inputDate;else return inputText;\n  };\n  const getWidth = () => {\n    if (inputWidth === 0) {\n      let decrementWidth = 0;\n      if (isPassword) {\n        decrementWidth = 20;\n      }\n      switch (width) {\n        case 'normal':\n          setInputWidth(265 - decrementWidth);\n          break;\n        case 'small':\n          setInputWidth(165 - decrementWidth);\n          break;\n        case 'large':\n          setInputWidth(365 - decrementWidth);\n          break;\n      }\n    }\n  };\n  useEffect(() => {\n    getWidth();\n    getMarginTop();\n  }, []);\n  useEffect(() => {\n    if (counterSend !== 0) {\n      sendData();\n    }\n    setCounterSend(1);\n  }, [selectedReg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FormInput\",\n    style: {\n      marginTop: marginTop\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: isPassword ? 'flex' : 'block',\n        alignItems: 'center',\n        maxWidth: inputWidth + 30\n      },\n      className: isError ? 'FormInput__bar_error' : 'FormInput__bar',\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          width: inputWidth\n        },\n        type: getInputType(),\n        onChange: isTel ? telNumHandler : date ? dateHandler : isPassword ? passwordHandler : isCard ? cardHandler : inputHandler,\n        value: getInputValue(),\n        autoComplete: \"new-password\",\n        className: \"FormInput_input\",\n        placeholder: isTel ? '+7(___)__-__-__' : placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), isPassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: passwordShow ? 'password_show' : 'password_hide',\n        onClick: passwordShowHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }, this), isInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this), isError ? errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__errorMessage\",\n      style: {\n        maxWidth: inputWidth\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FormInput__errorMessage\",\n      style: {\n        maxWidth: inputWidth\n      },\n      children: ErrorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 9\n  }, this);\n};\n_s(FormInput, \"7N2ZrIW+CJKgVUBJImNIL+9HV20=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useDate];\n});\n_c = FormInput;\nexport default FormInput;\nvar _c;\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"names":["React","useEffect","useState","useDate","selectValid","selectUserData","setIsSetPassword","setPassword","setPasswordUpdate","setUserData","useDispatch","useSelector","FormInput","field","placeholder","isTel","title","checkPassword","errorMessage","validation","minLength","maxLength","isPassword","isInfo","isCard","width","indexOne","date","inputType","dispatch","selectedReg","userDateRedux","checkPasswordDate","passwordShow","setPasswordShow","counterSend","setCounterSend","isError","setIsError","ErrorMsg","setErrorMsg","inputWidth","setInputWidth","marginTop","setMarginTop","telNum","setTelNum","inputText","setInputText","inputDate","setInputDate","sendTime","setSendTime","intervalId","setIntervalId","passwordShowHandler","createErrorMsg","msg","checkValid","valid","currentText","length","trim","test","newCT","substring","newNewCT","replace","replaceAll","String","sendData","dataValue","counter","inputHandler","e","inputValue","target","value","passwordHandler","clearInterval","setInterval","dateHandler","cardHandler","beforeValue","split","forEach","cv","telNumHandler","Number","copyInputValue","every","i","arr","newVal","join","getMarginTop","getInputType","getInputValue","getWidth","decrementWidth","display","alignItems","maxWidth"],"sources":["/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport ValidationType from '../../../types/Validation';\nimport './FormInput.css'\nimport { useDate } from '../../../hooks/useDate'\nimport { selectValid, selectUserData, setIsSetPassword, setPassword, setPasswordUpdate, setUserData } from '../../globalSlices/registrationSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { varUserModel } from '../../../types/UserModel';\ninterface FormInputProps{\n    field: varUserModel;\n    placeholder: string;\n    title: string;\n    errorMessage?: string;\n    isPassword?: boolean;\n    isInfo?: boolean;\n    isTel?: boolean;\n    isCard?: boolean;\n    checkPassword?: boolean;\n    validation?: ValidationType;\n    date?: boolean;\n    width?: 'normal' | 'small' | 'large';\n    indexOne?: true;\n    inputType?: string;\n}\n\nconst FormInput: FC<FormInputProps> = ({\n    field,\n    placeholder,\n    isTel = false,\n    title,\n    checkPassword = false,\n    errorMessage,\n    validation = {\n        minLength: 1,\n        maxLength: 100,\n\n    },\n    isPassword = false,\n    isInfo = false,\n    isCard = false,\n    width = 'normal',\n    indexOne = false,\n    date = false,\n    inputType = \"text\"\n}) => {\n    const dispatch = useDispatch()\n    const selectedReg = useSelector(selectValid)\n    const userDateRedux = useSelector(selectUserData)\n    const checkPasswordDate = useSelector(setPassword)\n\n    const [passwordShow, setPasswordShow] = useState <boolean>(true)\n    const [counterSend, setCounterSend] = useState <number>(0)\n    const [isError, setIsError] = useState <boolean>(false)\n    const [ErrorMsg, setErrorMsg] = useState <string>('')\n    const [inputWidth, setInputWidth] = useState <number>(0)\n    const [marginTop, setMarginTop] = useState <number>(0)\n    const [telNum, setTelNum] = useState <string>('+7 (___) ___-__-_')\n    const [inputText, setInputText] = useState <string>('')\n    const [inputDate, setInputDate] = useState <string>(useDate())\n\n    const [sendTime, setSendTime] = useState <number>(1);\n    const [intervalId, setIntervalId] = useState <any>(null);\n\n    const passwordShowHandler = () => {\n        if(passwordShow){\n            setPasswordShow(false)\n            return\n        }\n        setPasswordShow(true)\n    }\n\n    const createErrorMsg = (msg: string) => {\n        setIsError(true)\n        setErrorMsg(msg)\n    }\n\n    const checkValid = (): boolean => {\n        let valid: boolean = false\n        let currentText;\n\n        if(date) currentText = inputDate\n        else if(isTel) currentText = telNum\n        else currentText = inputText\n\n        if(field === 'none') return false\n        if(validation.minLength <= currentText.length || isTel){\n            if(validation.maxLength >= currentText.length || isTel){\n                if(field !== 'birthdate' && field !== 'card' && field !== 'telephone' && field !== 'password' && field !== 'check'){\n                    currentText = currentText.trim()\n                    if (!/\\s/g.test(currentText)){\n                        setIsError(false)\n                        return true\n                    }\n                    else{\n                        createErrorMsg('Это поле не должно содержать знак пробела')\n                    }\n                }\n                else{\n                    if(isTel){\n                        if(currentText[0] === '+'){\n                            let newCT = currentText.substring(1)\n                            let newNewCT = newCT.replace('7','8');\n                            currentText = newNewCT\n                        }\n                        currentText = currentText.replaceAll(' ', '')\n                        currentText = currentText.replaceAll('-', '')\n                        currentText = currentText.replace('(', '')\n                        currentText = currentText.replace(')', '')\n                        \n                        if(validation.minLength < currentText.length){\n                            if(validation.maxLength >= currentText.length){\n                                setIsError(false)\n                                return true\n                            }\n                            else{\n                                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n                            }\n                        }\n                        else{\n                            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n                        }\n                    }\n                    else if(isPassword){\n                        if(!/\\s/g.test(currentText) && !/-/g.test(currentText) && !/\\//g.test(currentText)){\n                            setIsError(false)\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароль не должен содержать символов: \"пробел\" , \"/\" , \"/\"')\n                        }\n                    }\n                    else if(checkPassword){\n                        if(checkPasswordDate === inputText){\n                            setIsError(false)\n                            dispatch(setIsSetPassword(true))\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароли не совпадают')\n                        }\n                    }\n                    else if(field === 'birthdate'){\n                        setIsError(false)\n                        return true\n                    }\n\n                    else if(field === 'card'){\n                        setIsError(false)\n                        return true\n                    }\n                    \n                }\n            }\n            else{\n                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n            }\n        }\n        else{\n            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n        }\n        return valid\n    }\n    const sendData = () => {\n        let dataValue;\n\n        if(date) dataValue = inputDate\n        else if(isTel) dataValue = telNum\n        else dataValue = inputText\n        const valid: boolean = checkValid()\n\n        if(isTel){\n            if(dataValue[0] === '+'){\n                let newCT = dataValue.substring(1)\n                let newNewCT = newCT.replace('7','8');\n                dataValue = newNewCT\n            }\n            dataValue = dataValue.replaceAll(' ', '')\n            dataValue = dataValue.replaceAll('-', '')\n            dataValue = dataValue.replace('(', '')\n            dataValue = dataValue.replace(')', '')\n        }\n        if(!valid){\n            if(isTel) setTelNum('+7 (___) ___-__-_')\n            else setInputText('')\n        }\n\n        if(field !== 'none' && valid){\n            dispatch(setUserData({[field]: dataValue}))\n        }\n    }\n    let counter = 0\n    const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        setInputText(inputValue)\n    }\n    const passwordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        counter = 0\n        clearInterval(intervalId);\n\n        setIntervalId(setInterval(() => {\n            counter = counter + 0.5\n            if (counter === sendTime) {\n                dispatch(setPasswordUpdate(inputValue))\n                clearInterval(intervalId);\n                return\n            }\n        }, 500));\n        setInputText(inputValue)\n\n    }\n    const dateHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        setInputDate(inputValue)\n    }\n    const cardHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        let beforeValue: string = ''\n        let counter = 0\n        inputValue.split('').forEach((cv) => {\n            if(counter === 4) {\n                beforeValue = beforeValue + ' ' + cv\n            }\n            else {\n                beforeValue = beforeValue + cv\n            }\n            counter++\n        })\n        beforeValue = beforeValue.trim()\n        setInputDate(beforeValue)\n    }\n    const telNumHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n\n        if(inputValue.length - 1 < 18 && Number(inputValue[inputValue.length - 1]) >= 0){\n            let copyInputValue: string[] = inputValue.split('')\n            copyInputValue.every((cv, i, arr) => {\n                if(cv === '_') {\n                    arr[i] = inputValue[inputValue.length - 1]\n                    arr[inputValue.length - 1] = ''\n                    return false\n                }\n                else return true\n            })\n\n            let newVal: string = copyInputValue.join('')\n            setTelNum(newVal)\n        }\n        else{\n            setTelNum(inputValue)\n        }\n\n    }\n    const getMarginTop = () => {\n        if(!indexOne){\n            if(isError){\n                setMarginTop(29)\n            }\n            else{\n                setMarginTop(53)\n            }\n        }\n    }\n    const getInputType = () => {\n        if(isPassword){\n            if(passwordShow) return 'password'\n            else return inputType\n        }\n        else if(date) return 'date'\n        else return inputType\n    }\n    \n    const getInputValue = () => {\n        if(isTel) return telNum\n        else if(date) return inputDate\n        else return inputText\n    }\n    const getWidth = () => {\n        if(inputWidth === 0){\n            let decrementWidth = 0\n            if(isPassword){\n                decrementWidth = 20\n            }\n            switch(width){\n                case 'normal':\n                    setInputWidth(265 - decrementWidth)\n                    break\n                case 'small':\n                    setInputWidth(165 - decrementWidth)\n                    break\n                case 'large':\n                    setInputWidth(365 - decrementWidth)\n                    break\n            }\n        }\n    }\n\n    useEffect(() => {\n        getWidth()\n        getMarginTop()\n    }, [])\n    useEffect(() => {\n        if(counterSend !== 0){\n            sendData()\n        }\n        setCounterSend(1)\n    }, [selectedReg])\n    return (\n        <div className='FormInput' style={{marginTop: marginTop}}   >\n            <div className=\"FormInput__title\">{title}</div>\n            <div \n            style={{display: isPassword ? 'flex' : 'block', alignItems: 'center', maxWidth: inputWidth + 30}}\n            className={isError ? 'FormInput__bar_error' : 'FormInput__bar'}>\n                <input\n                style={{width: inputWidth}}\n                type={getInputType()}\n                onChange={isTel ? telNumHandler : date ? dateHandler : isPassword ? passwordHandler : isCard ? cardHandler: inputHandler}\n                value={getInputValue()}\n                autoComplete='new-password'\n                className='FormInput_input'\n                placeholder={isTel ? '+7(___)__-__-__' : placeholder}\n                />\n                {\n                    isPassword ? \n                    <div\n                    className={passwordShow ? 'password_show' : 'password_hide'}\n                    onClick={passwordShowHandler}\n                    ></div>\n                    :\n                    <div></div>\n                }\n                {\n                    isInfo ?\n                    <div className='info'></div>\n                    :\n                    <div></div>\n                }\n            </div>\n            {\n                isError ?\n                errorMessage\n                    ? \n                        <div className='FormInput__errorMessage' style={{maxWidth: inputWidth}}>{errorMessage}</div>\n                    :\n                        <div className='FormInput__errorMessage' style={{maxWidth: inputWidth}}>{ErrorMsg}</div>\n                :\n                <div></div>\n            }\n        </div>\n    );\n};\n\nexport default FormInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}